# coding: utf-8

"""
    SpaceTraders API

    SpaceTraders is a multiplayer sci-fi strategy game where you acquire and manage a fleet of ships across a growing and dynamic universe.  Similar to games such as Eve Online, you work with or against other players to establish trade routes, chart new systems, mine precious ores, patrol for pirates, spy on factions, and discover hidden treasures.  SpaceTraders as a game is unique in that it is entirely accessible through open and well-documented API endpoints.  If this sounds fun and interesting to you, please drop into our Discord and get to know the community. We are actively working on new clients, new ideas and sharing tips for how to play the game.   ```json http {   \"method\": \"GET\",   \"url\": \"https://v2.api.spacetraders.io\", } ```  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: joel@spacetraders.io
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class MarketTransaction(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "shipSymbol",
            "units",
            "type",
            "pricePerUnit",
            "timestamp",
        }
        
        class properties:
            shipSymbol = schemas.StrSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def PURCHASE(cls):
                    return cls("PURCHASE")
                
                @schemas.classproperty
                def SELL(cls):
                    return cls("SELL")
            
            
            class units(
                schemas.IntSchema
            ):
                pass
            
            
            class pricePerUnit(
                schemas.IntSchema
            ):
                pass
            timestamp = schemas.DateTimeSchema
            tradeSymbol = schemas.StrSchema
            
            
            class totalPrice(
                schemas.IntSchema
            ):
                pass
            __annotations__ = {
                "shipSymbol": shipSymbol,
                "type": type,
                "units": units,
                "pricePerUnit": pricePerUnit,
                "timestamp": timestamp,
                "tradeSymbol": tradeSymbol,
                "totalPrice": totalPrice,
            }
    
    shipSymbol: MetaOapg.properties.shipSymbol
    units: MetaOapg.properties.units
    type: MetaOapg.properties.type
    pricePerUnit: MetaOapg.properties.pricePerUnit
    timestamp: MetaOapg.properties.timestamp
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shipSymbol"]) -> MetaOapg.properties.shipSymbol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["units"]) -> MetaOapg.properties.units: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pricePerUnit"]) -> MetaOapg.properties.pricePerUnit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tradeSymbol"]) -> MetaOapg.properties.tradeSymbol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalPrice"]) -> MetaOapg.properties.totalPrice: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["shipSymbol", "type", "units", "pricePerUnit", "timestamp", "tradeSymbol", "totalPrice", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shipSymbol"]) -> MetaOapg.properties.shipSymbol: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["units"]) -> MetaOapg.properties.units: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pricePerUnit"]) -> MetaOapg.properties.pricePerUnit: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tradeSymbol"]) -> typing.Union[MetaOapg.properties.tradeSymbol, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalPrice"]) -> typing.Union[MetaOapg.properties.totalPrice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["shipSymbol", "type", "units", "pricePerUnit", "timestamp", "tradeSymbol", "totalPrice", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        shipSymbol: typing.Union[MetaOapg.properties.shipSymbol, str, ],
        units: typing.Union[MetaOapg.properties.units, decimal.Decimal, int, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        pricePerUnit: typing.Union[MetaOapg.properties.pricePerUnit, decimal.Decimal, int, ],
        timestamp: typing.Union[MetaOapg.properties.timestamp, str, datetime, ],
        tradeSymbol: typing.Union[MetaOapg.properties.tradeSymbol, str, schemas.Unset] = schemas.unset,
        totalPrice: typing.Union[MetaOapg.properties.totalPrice, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MarketTransaction':
        return super().__new__(
            cls,
            *args,
            shipSymbol=shipSymbol,
            units=units,
            type=type,
            pricePerUnit=pricePerUnit,
            timestamp=timestamp,
            tradeSymbol=tradeSymbol,
            totalPrice=totalPrice,
            _configuration=_configuration,
            **kwargs,
        )
